/*
 * Copyright (c) 2013, ninckblokje
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer. 
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package ninckblokje.otros.logviewer.importer;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import ninckblokje.otros.logviewer.sax.helpers.OC4JLogHandler;
import org.xml.sax.SAXException;
import pl.otros.logview.LogDataCollector;
import pl.otros.logview.importer.InitializationException;
import pl.otros.logview.importer.LogImporter;
import pl.otros.logview.parser.ParsingContext;
import pl.otros.logview.pluginable.AbstractPluginableElement;

/**
 * Implementation of {@link pl.otros.logview.importer.LogImporter} for importing
 * log.xml files generated by OC4J 10g.
 *
 * @author ninckblokje
 */
public class OC4JLogImporter extends AbstractPluginableElement implements LogImporter {

    private static final Logger LOGGER = Logger.getLogger(OC4JLogImporter.class.getName());
    
    private static final String DESCRIPTION = "";
    private static final String NAME = "OC4JLogImporter";

    public OC4JLogImporter() {
        super(NAME, DESCRIPTION);
    }

    @Override
    public void init(Properties prprts) throws InitializationException {
        // nothing
    }

    @Override
    public void initParsingContext(ParsingContext pc) {
        // nothing
    }

    @Override
    public void importLogs(InputStream is, LogDataCollector ldc, ParsingContext pc) {
        try {
            SAXParserFactory factory = SAXParserFactory.newInstance();
            SAXParser parser = factory.newSAXParser();

            LOGGER.log(Level.FINER, "Parsing log file");
            OC4JLogHandler handler = new OC4JLogHandler(ldc, pc);
            parser.parse(is, handler);
        } catch (IOException ex) {
            LOGGER.log(Level.SEVERE, "IOException", ex);
        } catch (ParserConfigurationException ex) {
            LOGGER.log(Level.SEVERE, "ParserConfigurationException", ex);
        } catch (SAXException ex) {
            LOGGER.log(Level.SEVERE, "SAXException", ex);
        }
    }

    @Override
    public String getKeyStrokeAccelelator() {
        // nothing
        return null;
    }

    @Override
    public int getMnemonic() {
        // nothing
        return 0;
    }

    @Override
    public Icon getIcon() {
        // nothing
        return null;
    }

    @Override
    public int getApiVersion() {
        return LOG_IMPORTER_VERSION_1;
    }
}
